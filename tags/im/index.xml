<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Im on 欣菜团</title>
    <link>https://lbzzyz.github.io/tags/im/</link>
    <description>Recent content in Im on 欣菜团</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Jun 2021 01:38:02 +0000</lastBuildDate>
    <atom:link href="https://lbzzyz.github.io/tags/im/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IM-数据协议设计</title>
      <link>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/im-%E6%95%B0%E6%8D%AE%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 05 Jun 2021 01:38:02 +0000</pubDate>
      <guid>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/im-%E6%95%B0%E6%8D%AE%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>前言 本文主要介绍IM通讯软件的数据封装。我们知道，TCP协议是一种流式协议，即以字节流的形式在网络中传输。TCP协议本身不存在边界，因此对于数据收发端，必须定义一种共识的协议，用于双方对数据进行编码与解码。一般来说，编码动作由发送端完成，解码则由接收端完成。 本文介绍的数据封装形式表现为：协议头 + 协议体。下面首先介绍协议头的设计。&#xA;协议头设计 首先考虑一个例子，客户端需要给服务器提供一个表单信息如下： name : 如Bingzhi Li(变长字段) 年龄 : 22 电话 : 嵌入类型：手机 座机 语言 : 中文 英文 &amp;hellip;&#xA;由于表单中存在很多变长字段，因此无法用结构体的形式对数据进行定长定义。&#xA;再考虑这样一个问题，客户端向服务器发送两个数据包：1.文字信息包（33字节）；2.登录信息包（22字节）。上文有提到，TCP是一种流式协议，如果在传输过程中发生“粘包”的现象，即客户端一次收到33+22=55字节的信息，这时如果没有定义双端的协议，则接收端根本没有办法将这55字节的协议拆分成两个包，这时就体现出了协议的重要性。 简单总结以下定义数据协议的原因： 1.保证消息完整性(在消息头定义包长度，解决TCP粘包问题)。 2.封装body使用的序列化协议可能不同，如protobuf,json,xml等。&#xA;针对protobuf设计协议头，会有service id和cmd id两个字段，service id代表大的服务类，如登录，消息发送等，cmd id则代表具体的服务，如请求登录，请求离线，请求发送消息等。 为什么xml不需要这样定义？ 因为它可以在收到消息之后再去解析，因为他是文本形式传输的，而protobuf为二进制，不便于解析。&#xA;nginx使用的协议： typedef struct { uint8_t magic[2]; //magic number uint16_t version; //protocol version uint16_t type; //protocol type: json, xml, binary, protobuf and so on uint16_t len; //body length uint32_t seq; //message number uint16_t sid; //service id uint16_t cid; //command id uint8_t reserve[2]; //reserve</description>
    </item>
    <item>
      <title>Im-UI设计规范</title>
      <link>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/im-ui%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</link>
      <pubDate>Thu, 18 Mar 2021 22:13:58 +0000</pubDate>
      <guid>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/im-ui%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</guid>
      <description>本文大纲 添加好友界面UI设计 界面逻辑代码 添加好友界面UI设计 颜色风格&#xA;本软件采用谷歌marterial design风格，选用DEEP PURPLE做前景色，AMBER做装饰色生成的配色如下： /* Palette generated by Material Palette - materialpalette.com/deep-purple/amber */ .dark-primary-color { background: #512DA8; } .default-primary-color { background: #673AB7; } .light-primary-color { background: #D1C4E9; } .text-primary-color { color: #FFFFFF; } .accent-color { background: #FFC107; } .primary-text-color { color: #212121; } .secondary-text-color { color: #757575; } .divider-color { border-color: #BDBDBD; } qt布局的问题 要把sizePolicy设置成Ignore才能让布局中的Strengh生效 QT sizeHint 及 Policy的用法&#xA;下拉菜单设计 参考文章 https://www.xueui.cn/experience/app-experience/enhance-the-detail-design-of-drop-down-menu-in-ui-interface.html&#xA;实操&#xA;QT QComboBox样式设置全解析 戳这里</description>
    </item>
    <item>
      <title>TeamTalk-1 db_porxy_server</title>
      <link>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/teamtalk/teamtalk-1/</link>
      <pubDate>Sat, 06 Mar 2021 23:56:00 +0000</pubDate>
      <guid>https://lbzzyz.github.io/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/im/teamtalk/teamtalk-1/</guid>
      <description>1. 初始化redis缓存数据库 CacheManager* pCacheManager = CacheManager::getInstance(); if (!pCacheManager) { log(&amp;#34;CacheManager init failed&amp;#34;); return -1; } 进到CacheManager，这里用了一个单例模式得到CacheManager的实例&#xA;CacheManager* CacheManager::getInstance() { if (!s_cache_manager) { s_cache_manager = new CacheManager(); if (s_cache_manager-&amp;gt;Init()) { delete s_cache_manager; s_cache_manager = NULL; } } return s_cache_manager; } 上面的s_cache_manager是CacheManager类的私有static变量static CacheManager* s_cache_manager;&#xA;由于是单例,因此CacheManager的构造函数是一个private的空构造，实际上的初始化步骤在Init内&#xA;int CacheManager::Init() { CConfigFileReader config_file(&amp;#34;dbproxyserver.conf&amp;#34;); char* cache_instances = config_file.GetConfigName(&amp;#34;CacheInstances&amp;#34;); if (!cache_instances) { log(&amp;#34;not configure CacheIntance&amp;#34;); return 1; } char host[64]; char port[64]; char db[64]; char maxconncnt[64]; CStrExplode instances_name(cache_instances, &amp;#39;,&amp;#39;); for (uint32_t i = 0; i &amp;lt; instances_name.</description>
    </item>
  </channel>
</rss>
